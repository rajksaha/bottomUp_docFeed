<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bottomUp.myBatis.persistence.AppointmentMapper">

	<insert id="create" parameterType="Appointment" useGeneratedKeys="true" keyProperty="appointmentID" >

		INSERT INTO `doctor_feed`.`appointment`(
			`doctorID`,
			`patientID`,
			`appDate`,
			`appTime`,
			`status`,
			`appointmentType`,
			`updatedBy`,
			`updatedOn`,
			`createdBy`,
			`createdOn`
		)
		VALUES(
			#{doctorID},
			#{patientID},
			#{appDate},
			#{appTime},
			#{status},
			#{appointmentType},
			#{updatedBy},
			#{updatedOn},
			#{createdBy},
			#{createdOn}
		);
	</insert>
	
	<update id="update" parameterType="Appointment">
		UPDATE `doctor_feed`.`appointment`
		SET
		`doctorID` = #{doctorID},
		`patientID` = #{patientID},
		`appDate` = #{appDate},
		`appTime` =#{appTime},
		`status` = #{status},
		`appointmentType` = #{appointmentType},
		`updatedBy` = #{updatedBy},
		`updatedOn` = #{updatedOn}
		WHERE appointmentID = #{appointmentID}
	</update>

	<update id="updateStatusByID" parameterType="Appointment">
		UPDATE `doctor_feed`.`appointment`
		SET
		`status` = #{status},
		`updatedBy` = #{updatedBy},
		`updatedOn` = #{updatedOn}
		WHERE appointmentID = #{appointmentID}
	</update>

	<select id="getByID" parameterType="long" resultType="Appointment">
		SELECT
			`appointmentID`,
			`doctorID`,
			`patientID`,
			`appDate`,
			`appTime`,
			`status`,
			`appointmentType`,
			`updatedBy`,
			`updatedOn`,
			`createdBy`,
			`createdOn`
		FROM `doctor_feed`.`appointment`

		WHERE appointmentID = #{appointmentID}
	</select>

	<select id="getByParam" parameterType="map" resultType="Appointment">
		SELECT
		`appointmentID`,
		`doctorID`,
		`patientID`,
		`appDate`,
		`appTime`,
		`status`,
		`appointmentType`,
		`updatedBy`,
		`updatedOn`,
		`createdBy`,
		`createdOn`
		FROM `doctor_feed`.`appointment`
		WHERE 1 = 1
		<if test="appointmentID != null">
			AND appointmentID = #{appointmentID}
		</if>
		<if test="patientID != null">
			AND patientID = #{patientID}
		</if>
		<if test="doctorID != null">
			AND doctorID = #{doctorID}
		</if>
		<if test="appDate != null">
			AND appDate = #{appDate}
		</if>
		<if test="offset != null and limit != null and sortColumn != null and sortOrder != null">
			ORDER BY ${sortColumn} ${sortOrder}
			LIMIT #{limit} OFFSET #{offset}
		</if>
	</select>

	<resultMap id="patientMap" type="appointmentDetail">
		<result property="patient.firstName" column="firstName"/>
		<result property="patient.lastName" column="lastName"/>
		<result property="patient.address" column="address"/>
		<result property="patient.contactNo" column="contactNo"/>
		<result property="patient.dateOfBirth" column="dateOfBirth"/>
		<result property="patient.sex" column="sex"/>
		<result property="patient.occupation" column="occupation"/>
		<result property="patient.patientType" column="patientTypeID"/>
		<result property="patient.patientTypeName" column="patientTypeName"/>
	</resultMap>

	<select id="getAppPatientDetail" parameterType="map" resultType="appointmentDetail" resultMap="patientMap">
		SELECT
			app.`appointmentID`,
			app.`doctorID`,
			app.`patientID`,
			app.`appDate`,
			app.`appTime`,
			app.`status`,
			app.`appointmentType`,
			apt.name AS appointmentTypeName,
			app.`updatedBy`,
			app.`updatedOn`,
			app.`createdBy`,
			app.`createdOn`,
			p.patientType AS patientTypeID,
			pt.typeName AS patientTypeName,
			pup.firstName AS firstName,
			pup.lastName AS lastName,
			pup.address AS address,
			pup.contactNo AS contactNo,
			pup.dateOfBirth AS dateOfBirth,
			pup.sex AS sex,
			<if test="lastVisit != null">
				app2.appDate AS lastVisitDate,
			</if>
			p.occupation AS occupation
		FROM `doctor_feed`.`appointment` app
		JOIN doctor d ON app.doctorID = d.doctorID
		JOIN `doctor_feed`.patient p ON app.patientID = p.patientID
		JOIN `doctor_feed`.appointment_type apt ON app.appointmentType = apt.appointmentTypeID
		JOIN `doctor_feed`.`bottom_up_user` pu ON p.userID = pu.userID
		JOIN bottom_up_user_profile pup ON pu.userID = pup.userID
		<if test="lastVisit != null">
			LEFT JOIN  `doctor_feed`.`appointment` app2 on app2.appointmentID = (SELECT app3.appointmentID
			FROM `doctor_feed`.`appointment` app3
			WHERE app3.patientID = app.patientID
			AND app3.doctorID = app.doctorID
			AND app3.appDate <![CDATA[ < ]]> DATE_FORMAT(#{appDate},'%Y-%m-%d')
			AND app.appointmentType != 0
			ORDER BY app3.appDate DESC
			LIMIT 1)
		</if>
		LEFT JOIN doctor_feed.patient_type pt ON p.patientType = pt.patientTypeID
		WHERE 1 = 1
		<if test="appointmentID != null">
			AND app.appointmentID = #{appointmentID}
		</if>
		<if test="patientID != null">
			AND app.patientID = #{patientID}
		</if>
		<if test="doctorID != null">
			AND app.doctorID = #{doctorID}
		</if>
		<if test="appDate != null">
			AND app.appDate = #{appDate}
		</if>
		<if test="startDate != null and endDate !=null">
			AND app.appDate IN BETWEEN (DATE(#{startDate}), DATE(#{endDate}))
		</if>
		<if test="offset != null and limit != null and sortColumn != null and sortOrder != null">
			ORDER BY ${sortColumn} ${sortOrder}
			LIMIT #{limit} OFFSET #{offset}
		</if>
	</select>

	<select id="getCountByParam" parameterType="map" resultType="Long">
		SELECT COUNT(*)
		FROM `doctor_feed`.`appointment`
		WHERE 1 = 1
		<if test="appointmentID != null">
			AND appointmentID = #{appointmentID}
		</if>
		<if test="patientID != null">
			AND patientID = #{patientID}
		</if>
		<if test="doctorID != null">
			AND doctorID = #{doctorID}
		</if>
		<if test="appDate != null">
			AND appDate = #{appDate}
		</if>
		<if test="offset != null and limit != null and sortColumn != null and sortOrder != null">
			ORDER BY ${sortColumn} ${sortOrder}
			LIMIT #{limit} OFFSET #{offset}
		</if>
	</select>
	<delete id="delete" parameterType="map">
		DELETE  FROM `doctor_feed`.appointment
		WHERE 1=1
		<if test="appointmentID != null">
			AND appointmentID = #{appointmentID}
		</if>
	</delete>


</mapper>